// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing New Task Page renders as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Component
    style={
      Object {
        "alignItems": "stretch",
        "backgroundColor": "white",
        "flex": 1,
      }
    }
  >
    <Component
      style={
        Object {
          "alignItems": "center",
          "justifyContent": "center",
          "marginVertical": 20,
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "fontSize": 30,
            "fontWeight": "bold",
          }
        }
      >
        New Task
      </Text>
    </Component>
    <ForwardRef(Themed.Input)
      containerStyle={
        Object {
          "marginBottom": 10,
          "paddingLeft": 10,
        }
      }
      errorMessage={null}
      errorStyle={
        Object {
          "color": "red",
        }
      }
      label="Name"
      labelStyle={
        Object {
          "color": "grey",
          "fontSize": 15,
          "fontWeight": "300",
        }
      }
      onChangeText={[Function]}
      value=""
    />
    <ForwardRef(Themed.Input)
      containerStyle={
        Object {
          "marginBottom": 10,
          "paddingLeft": 10,
        }
      }
      errorMessage={null}
      errorStyle={
        Object {
          "color": "red",
        }
      }
      label="Description"
      labelStyle={
        Object {
          "color": "grey",
          "fontSize": 15,
          "fontWeight": "300",
        }
      }
      onChangeText={[Function]}
      value=""
    />
    <RNPickerSelect
      disabled={false}
      doneText="Done"
      hideDoneBar={false}
      hideIcon={false}
      itemKey={null}
      items={
        Array [
          Object {
            "label": "Daily",
            "value": "Daily",
          },
          Object {
            "label": "Weekly",
            "value": "Weekly",
          },
          Object {
            "label": "Monthly",
            "value": "Monthly",
          },
          Object {
            "label": "One Time Only",
            "value": "One Time Only",
          },
        ]
      }
      modalProps={Object {}}
      onDonePress={null}
      onDownArrow={null}
      onUpArrow={null}
      onValueChange={[Function]}
      pickerProps={Object {}}
      placeholder={
        Object {
          "label": "Select something",
          "value": null,
        }
      }
      placeholderTextColor="#C7C7CD"
      style={Object {}}
      textInputProps={Object {}}
      useNativeAndroidPickerStyle={true}
      value=""
    >
      <ForwardRef(Themed.Input)
        containerStyle={
          Object {
            "marginBottom": 10,
            "paddingLeft": 10,
          }
        }
        label="Period"
        labelStyle={
          Object {
            "color": "grey",
            "fontSize": 15,
            "fontWeight": "300",
          }
        }
        placeholder="Select a period..."
        placeholderTextColor="gray"
        value=""
      />
    </RNPickerSelect>
    <RNPickerSelect
      disabled={false}
      doneText="Done"
      hideDoneBar={false}
      hideIcon={false}
      itemKey={null}
      items={
        Array [
          Object {
            "label": "Once",
            "value": "Once",
          },
          Object {
            "label": "Twice",
            "value": "Twice",
          },
          Object {
            "label": "Three times",
            "value": "Three times",
          },
          Object {
            "label": "Unlimited",
            "value": "Unlimited",
          },
        ]
      }
      modalProps={Object {}}
      onDonePress={null}
      onDownArrow={null}
      onUpArrow={null}
      onValueChange={[Function]}
      pickerProps={Object {}}
      placeholder={Object {}}
      placeholderTextColor="#C7C7CD"
      style={Object {}}
      textInputProps={Object {}}
      useNativeAndroidPickerStyle={true}
    >
      <ForwardRef(Themed.Input)
        containerStyle={
          Object {
            "marginBottom": 10,
            "paddingLeft": 10,
          }
        }
        label="Pattern"
        labelStyle={
          Object {
            "color": "grey",
            "fontSize": 15,
            "fontWeight": "300",
          }
        }
        placeholder="Select a pattern..."
        placeholderTextColor="gray"
        value=""
      />
    </RNPickerSelect>
    <Component
      style={
        Object {
          "alignItems": "center",
          "marginVertical": 10,
        }
      }
    >
      <ForwardRef(Themed.Button)
        buttonStyle={
          Object {
            "backgroundColor": "rgba(40, 160, 147, 1)",
            "borderColor": "transparent",
            "borderRadius": 20,
            "borderWidth": 0,
            "height": 40,
            "width": 120,
          }
        }
        onPress={[Function]}
        title="Create"
      />
    </Component>
  </Component>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Component
          style={
            Object {
              "alignItems": "center",
              "justifyContent": "center",
              "marginVertical": 20,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "fontSize": 30,
                "fontWeight": "bold",
              }
            }
          >
            New Task
          </Text>
        </Component>,
        <ForwardRef(Themed.Input)
          containerStyle={
            Object {
              "marginBottom": 10,
              "paddingLeft": 10,
            }
          }
          errorMessage={null}
          errorStyle={
            Object {
              "color": "red",
            }
          }
          label="Name"
          labelStyle={
            Object {
              "color": "grey",
              "fontSize": 15,
              "fontWeight": "300",
            }
          }
          onChangeText={[Function]}
          value=""
        />,
        <ForwardRef(Themed.Input)
          containerStyle={
            Object {
              "marginBottom": 10,
              "paddingLeft": 10,
            }
          }
          errorMessage={null}
          errorStyle={
            Object {
              "color": "red",
            }
          }
          label="Description"
          labelStyle={
            Object {
              "color": "grey",
              "fontSize": 15,
              "fontWeight": "300",
            }
          }
          onChangeText={[Function]}
          value=""
        />,
        <RNPickerSelect
          disabled={false}
          doneText="Done"
          hideDoneBar={false}
          hideIcon={false}
          itemKey={null}
          items={
            Array [
              Object {
                "label": "Daily",
                "value": "Daily",
              },
              Object {
                "label": "Weekly",
                "value": "Weekly",
              },
              Object {
                "label": "Monthly",
                "value": "Monthly",
              },
              Object {
                "label": "One Time Only",
                "value": "One Time Only",
              },
            ]
          }
          modalProps={Object {}}
          onDonePress={null}
          onDownArrow={null}
          onUpArrow={null}
          onValueChange={[Function]}
          pickerProps={Object {}}
          placeholder={
            Object {
              "label": "Select something",
              "value": null,
            }
          }
          placeholderTextColor="#C7C7CD"
          style={Object {}}
          textInputProps={Object {}}
          useNativeAndroidPickerStyle={true}
          value=""
        >
          <ForwardRef(Themed.Input)
            containerStyle={
              Object {
                "marginBottom": 10,
                "paddingLeft": 10,
              }
            }
            label="Period"
            labelStyle={
              Object {
                "color": "grey",
                "fontSize": 15,
                "fontWeight": "300",
              }
            }
            placeholder="Select a period..."
            placeholderTextColor="gray"
            value=""
          />
        </RNPickerSelect>,
        <RNPickerSelect
          disabled={false}
          doneText="Done"
          hideDoneBar={false}
          hideIcon={false}
          itemKey={null}
          items={
            Array [
              Object {
                "label": "Once",
                "value": "Once",
              },
              Object {
                "label": "Twice",
                "value": "Twice",
              },
              Object {
                "label": "Three times",
                "value": "Three times",
              },
              Object {
                "label": "Unlimited",
                "value": "Unlimited",
              },
            ]
          }
          modalProps={Object {}}
          onDonePress={null}
          onDownArrow={null}
          onUpArrow={null}
          onValueChange={[Function]}
          pickerProps={Object {}}
          placeholder={Object {}}
          placeholderTextColor="#C7C7CD"
          style={Object {}}
          textInputProps={Object {}}
          useNativeAndroidPickerStyle={true}
        >
          <ForwardRef(Themed.Input)
            containerStyle={
              Object {
                "marginBottom": 10,
                "paddingLeft": 10,
              }
            }
            label="Pattern"
            labelStyle={
              Object {
                "color": "grey",
                "fontSize": 15,
                "fontWeight": "300",
              }
            }
            placeholder="Select a pattern..."
            placeholderTextColor="gray"
            value=""
          />
        </RNPickerSelect>,
        <Component
          style={
            Object {
              "alignItems": "center",
              "marginVertical": 10,
            }
          }
        >
          <ForwardRef(Themed.Button)
            buttonStyle={
              Object {
                "backgroundColor": "rgba(40, 160, 147, 1)",
                "borderColor": "transparent",
                "borderRadius": 20,
                "borderWidth": 0,
                "height": 40,
                "width": 120,
              }
            }
            onPress={[Function]}
            title="Create"
          />
        </Component>,
      ],
      "style": Object {
        "alignItems": "stretch",
        "backgroundColor": "white",
        "flex": 1,
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "fontSize": 30,
                "fontWeight": "bold",
              }
            }
          >
            New Task
          </Text>,
          "style": Object {
            "alignItems": "center",
            "justifyContent": "center",
            "marginVertical": 20,
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "accessible": true,
            "allowFontScaling": true,
            "children": "New Task",
            "ellipsizeMode": "tail",
            "style": Object {
              "fontSize": 30,
              "fontWeight": "bold",
            },
          },
          "ref": null,
          "rendered": "New Task",
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "containerStyle": Object {
            "marginBottom": 10,
            "paddingLeft": 10,
          },
          "errorMessage": null,
          "errorStyle": Object {
            "color": "red",
          },
          "label": "Name",
          "labelStyle": Object {
            "color": "grey",
            "fontSize": 15,
            "fontWeight": "300",
          },
          "onChangeText": [Function],
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "render": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "containerStyle": Object {
            "marginBottom": 10,
            "paddingLeft": 10,
          },
          "errorMessage": null,
          "errorStyle": Object {
            "color": "red",
          },
          "label": "Description",
          "labelStyle": Object {
            "color": "grey",
            "fontSize": 15,
            "fontWeight": "300",
          },
          "onChangeText": [Function],
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "render": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <ForwardRef(Themed.Input)
            containerStyle={
              Object {
                "marginBottom": 10,
                "paddingLeft": 10,
              }
            }
            label="Period"
            labelStyle={
              Object {
                "color": "grey",
                "fontSize": 15,
                "fontWeight": "300",
              }
            }
            placeholder="Select a period..."
            placeholderTextColor="gray"
            value=""
          />,
          "disabled": false,
          "doneText": "Done",
          "hideDoneBar": false,
          "hideIcon": false,
          "itemKey": null,
          "items": Array [
            Object {
              "label": "Daily",
              "value": "Daily",
            },
            Object {
              "label": "Weekly",
              "value": "Weekly",
            },
            Object {
              "label": "Monthly",
              "value": "Monthly",
            },
            Object {
              "label": "One Time Only",
              "value": "One Time Only",
            },
          ],
          "modalProps": Object {},
          "onDonePress": null,
          "onDownArrow": null,
          "onUpArrow": null,
          "onValueChange": [Function],
          "pickerProps": Object {},
          "placeholder": Object {
            "label": "Select something",
            "value": null,
          },
          "placeholderTextColor": "#C7C7CD",
          "style": Object {},
          "textInputProps": Object {},
          "useNativeAndroidPickerStyle": true,
          "value": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "containerStyle": Object {
              "marginBottom": 10,
              "paddingLeft": 10,
            },
            "label": "Period",
            "labelStyle": Object {
              "color": "grey",
              "fontSize": 15,
              "fontWeight": "300",
            },
            "placeholder": "Select a period...",
            "placeholderTextColor": "gray",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <ForwardRef(Themed.Input)
            containerStyle={
              Object {
                "marginBottom": 10,
                "paddingLeft": 10,
              }
            }
            label="Pattern"
            labelStyle={
              Object {
                "color": "grey",
                "fontSize": 15,
                "fontWeight": "300",
              }
            }
            placeholder="Select a pattern..."
            placeholderTextColor="gray"
            value=""
          />,
          "disabled": false,
          "doneText": "Done",
          "hideDoneBar": false,
          "hideIcon": false,
          "itemKey": null,
          "items": Array [
            Object {
              "label": "Once",
              "value": "Once",
            },
            Object {
              "label": "Twice",
              "value": "Twice",
            },
            Object {
              "label": "Three times",
              "value": "Three times",
            },
            Object {
              "label": "Unlimited",
              "value": "Unlimited",
            },
          ],
          "modalProps": Object {},
          "onDonePress": null,
          "onDownArrow": null,
          "onUpArrow": null,
          "onValueChange": [Function],
          "pickerProps": Object {},
          "placeholder": Object {},
          "placeholderTextColor": "#C7C7CD",
          "style": Object {},
          "textInputProps": Object {},
          "useNativeAndroidPickerStyle": true,
          "value": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "containerStyle": Object {
              "marginBottom": 10,
              "paddingLeft": 10,
            },
            "label": "Pattern",
            "labelStyle": Object {
              "color": "grey",
              "fontSize": 15,
              "fontWeight": "300",
            },
            "placeholder": "Select a pattern...",
            "placeholderTextColor": "gray",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <ForwardRef(Themed.Button)
            buttonStyle={
              Object {
                "backgroundColor": "rgba(40, 160, 147, 1)",
                "borderColor": "transparent",
                "borderRadius": 20,
                "borderWidth": 0,
                "height": 40,
                "width": 120,
              }
            }
            onPress={[Function]}
            title="Create"
          />,
          "style": Object {
            "alignItems": "center",
            "marginVertical": 10,
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "buttonStyle": Object {
              "backgroundColor": "rgba(40, 160, 147, 1)",
              "borderColor": "transparent",
              "borderRadius": 20,
              "borderWidth": 0,
              "height": 40,
              "width": 120,
            },
            "onPress": [Function],
            "title": "Create",
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
        },
        "type": [Function],
      },
    ],
    "type": "View",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Component
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "marginVertical": 20,
              }
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "fontSize": 30,
                  "fontWeight": "bold",
                }
              }
            >
              New Task
            </Text>
          </Component>,
          <ForwardRef(Themed.Input)
            containerStyle={
              Object {
                "marginBottom": 10,
                "paddingLeft": 10,
              }
            }
            errorMessage={null}
            errorStyle={
              Object {
                "color": "red",
              }
            }
            label="Name"
            labelStyle={
              Object {
                "color": "grey",
                "fontSize": 15,
                "fontWeight": "300",
              }
            }
            onChangeText={[Function]}
            value=""
          />,
          <ForwardRef(Themed.Input)
            containerStyle={
              Object {
                "marginBottom": 10,
                "paddingLeft": 10,
              }
            }
            errorMessage={null}
            errorStyle={
              Object {
                "color": "red",
              }
            }
            label="Description"
            labelStyle={
              Object {
                "color": "grey",
                "fontSize": 15,
                "fontWeight": "300",
              }
            }
            onChangeText={[Function]}
            value=""
          />,
          <RNPickerSelect
            disabled={false}
            doneText="Done"
            hideDoneBar={false}
            hideIcon={false}
            itemKey={null}
            items={
              Array [
                Object {
                  "label": "Daily",
                  "value": "Daily",
                },
                Object {
                  "label": "Weekly",
                  "value": "Weekly",
                },
                Object {
                  "label": "Monthly",
                  "value": "Monthly",
                },
                Object {
                  "label": "One Time Only",
                  "value": "One Time Only",
                },
              ]
            }
            modalProps={Object {}}
            onDonePress={null}
            onDownArrow={null}
            onUpArrow={null}
            onValueChange={[Function]}
            pickerProps={Object {}}
            placeholder={
              Object {
                "label": "Select something",
                "value": null,
              }
            }
            placeholderTextColor="#C7C7CD"
            style={Object {}}
            textInputProps={Object {}}
            useNativeAndroidPickerStyle={true}
            value=""
          >
            <ForwardRef(Themed.Input)
              containerStyle={
                Object {
                  "marginBottom": 10,
                  "paddingLeft": 10,
                }
              }
              label="Period"
              labelStyle={
                Object {
                  "color": "grey",
                  "fontSize": 15,
                  "fontWeight": "300",
                }
              }
              placeholder="Select a period..."
              placeholderTextColor="gray"
              value=""
            />
          </RNPickerSelect>,
          <RNPickerSelect
            disabled={false}
            doneText="Done"
            hideDoneBar={false}
            hideIcon={false}
            itemKey={null}
            items={
              Array [
                Object {
                  "label": "Once",
                  "value": "Once",
                },
                Object {
                  "label": "Twice",
                  "value": "Twice",
                },
                Object {
                  "label": "Three times",
                  "value": "Three times",
                },
                Object {
                  "label": "Unlimited",
                  "value": "Unlimited",
                },
              ]
            }
            modalProps={Object {}}
            onDonePress={null}
            onDownArrow={null}
            onUpArrow={null}
            onValueChange={[Function]}
            pickerProps={Object {}}
            placeholder={Object {}}
            placeholderTextColor="#C7C7CD"
            style={Object {}}
            textInputProps={Object {}}
            useNativeAndroidPickerStyle={true}
          >
            <ForwardRef(Themed.Input)
              containerStyle={
                Object {
                  "marginBottom": 10,
                  "paddingLeft": 10,
                }
              }
              label="Pattern"
              labelStyle={
                Object {
                  "color": "grey",
                  "fontSize": 15,
                  "fontWeight": "300",
                }
              }
              placeholder="Select a pattern..."
              placeholderTextColor="gray"
              value=""
            />
          </RNPickerSelect>,
          <Component
            style={
              Object {
                "alignItems": "center",
                "marginVertical": 10,
              }
            }
          >
            <ForwardRef(Themed.Button)
              buttonStyle={
                Object {
                  "backgroundColor": "rgba(40, 160, 147, 1)",
                  "borderColor": "transparent",
                  "borderRadius": 20,
                  "borderWidth": 0,
                  "height": 40,
                  "width": 120,
                }
              }
              onPress={[Function]}
              title="Create"
            />
          </Component>,
        ],
        "style": Object {
          "alignItems": "stretch",
          "backgroundColor": "white",
          "flex": 1,
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "fontSize": 30,
                  "fontWeight": "bold",
                }
              }
            >
              New Task
            </Text>,
            "style": Object {
              "alignItems": "center",
              "justifyContent": "center",
              "marginVertical": 20,
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "accessible": true,
              "allowFontScaling": true,
              "children": "New Task",
              "ellipsizeMode": "tail",
              "style": Object {
                "fontSize": 30,
                "fontWeight": "bold",
              },
            },
            "ref": null,
            "rendered": "New Task",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "containerStyle": Object {
              "marginBottom": 10,
              "paddingLeft": 10,
            },
            "errorMessage": null,
            "errorStyle": Object {
              "color": "red",
            },
            "label": "Name",
            "labelStyle": Object {
              "color": "grey",
              "fontSize": 15,
              "fontWeight": "300",
            },
            "onChangeText": [Function],
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "containerStyle": Object {
              "marginBottom": 10,
              "paddingLeft": 10,
            },
            "errorMessage": null,
            "errorStyle": Object {
              "color": "red",
            },
            "label": "Description",
            "labelStyle": Object {
              "color": "grey",
              "fontSize": 15,
              "fontWeight": "300",
            },
            "onChangeText": [Function],
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <ForwardRef(Themed.Input)
              containerStyle={
                Object {
                  "marginBottom": 10,
                  "paddingLeft": 10,
                }
              }
              label="Period"
              labelStyle={
                Object {
                  "color": "grey",
                  "fontSize": 15,
                  "fontWeight": "300",
                }
              }
              placeholder="Select a period..."
              placeholderTextColor="gray"
              value=""
            />,
            "disabled": false,
            "doneText": "Done",
            "hideDoneBar": false,
            "hideIcon": false,
            "itemKey": null,
            "items": Array [
              Object {
                "label": "Daily",
                "value": "Daily",
              },
              Object {
                "label": "Weekly",
                "value": "Weekly",
              },
              Object {
                "label": "Monthly",
                "value": "Monthly",
              },
              Object {
                "label": "One Time Only",
                "value": "One Time Only",
              },
            ],
            "modalProps": Object {},
            "onDonePress": null,
            "onDownArrow": null,
            "onUpArrow": null,
            "onValueChange": [Function],
            "pickerProps": Object {},
            "placeholder": Object {
              "label": "Select something",
              "value": null,
            },
            "placeholderTextColor": "#C7C7CD",
            "style": Object {},
            "textInputProps": Object {},
            "useNativeAndroidPickerStyle": true,
            "value": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "containerStyle": Object {
                "marginBottom": 10,
                "paddingLeft": 10,
              },
              "label": "Period",
              "labelStyle": Object {
                "color": "grey",
                "fontSize": 15,
                "fontWeight": "300",
              },
              "placeholder": "Select a period...",
              "placeholderTextColor": "gray",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "render": [Function],
            },
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <ForwardRef(Themed.Input)
              containerStyle={
                Object {
                  "marginBottom": 10,
                  "paddingLeft": 10,
                }
              }
              label="Pattern"
              labelStyle={
                Object {
                  "color": "grey",
                  "fontSize": 15,
                  "fontWeight": "300",
                }
              }
              placeholder="Select a pattern..."
              placeholderTextColor="gray"
              value=""
            />,
            "disabled": false,
            "doneText": "Done",
            "hideDoneBar": false,
            "hideIcon": false,
            "itemKey": null,
            "items": Array [
              Object {
                "label": "Once",
                "value": "Once",
              },
              Object {
                "label": "Twice",
                "value": "Twice",
              },
              Object {
                "label": "Three times",
                "value": "Three times",
              },
              Object {
                "label": "Unlimited",
                "value": "Unlimited",
              },
            ],
            "modalProps": Object {},
            "onDonePress": null,
            "onDownArrow": null,
            "onUpArrow": null,
            "onValueChange": [Function],
            "pickerProps": Object {},
            "placeholder": Object {},
            "placeholderTextColor": "#C7C7CD",
            "style": Object {},
            "textInputProps": Object {},
            "useNativeAndroidPickerStyle": true,
            "value": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "containerStyle": Object {
                "marginBottom": 10,
                "paddingLeft": 10,
              },
              "label": "Pattern",
              "labelStyle": Object {
                "color": "grey",
                "fontSize": 15,
                "fontWeight": "300",
              },
              "placeholder": "Select a pattern...",
              "placeholderTextColor": "gray",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "render": [Function],
            },
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <ForwardRef(Themed.Button)
              buttonStyle={
                Object {
                  "backgroundColor": "rgba(40, 160, 147, 1)",
                  "borderColor": "transparent",
                  "borderRadius": 20,
                  "borderWidth": 0,
                  "height": 40,
                  "width": 120,
                }
              }
              onPress={[Function]}
              title="Create"
            />,
            "style": Object {
              "alignItems": "center",
              "marginVertical": 10,
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "buttonStyle": Object {
                "backgroundColor": "rgba(40, 160, 147, 1)",
                "borderColor": "transparent",
                "borderRadius": 20,
                "borderWidth": 0,
                "height": 40,
                "width": 120,
              },
              "onPress": [Function],
              "title": "Create",
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "render": [Function],
            },
          },
          "type": [Function],
        },
      ],
      "type": "View",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;
