// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing Channel List Page renders as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Component
    style={
      Object {
        "alignItems": "stretch",
        "backgroundColor": "grey",
        "flex": 1,
      }
    }
  >
    <Component
      style={
        Object {
          "flex": 0.35,
        }
      }
    >
      <Component
        style={
          Object {
            "flex": 0.7,
            "flexDirection": "row",
          }
        }
      >
        <Component
          style={
            Object {
              "alignItems": "flex-start",
              "flex": 0.6,
              "justifyContent": "center",
              "marginLeft": 30,
              "marginTop": 50,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "white",
                "fontSize": 25,
                "fontWeight": "bold",
                "margin": 5,
              }
            }
          >
            mock
          </Text>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "white",
                "fontSize": 15,
                "margin": 5,
              }
            }
          />
        </Component>
        <Component
          style={
            Object {
              "alignItems": "center",
              "flex": 0.4,
              "justifyContent": "flex-end",
            }
          }
        >
          <Themed.Avatar
            height={128}
            source={
              Object {
                "uri": undefined,
              }
            }
            width={128}
          />
        </Component>
      </Component>
      <Component
        style={
          Object {
            "alignItems": "center",
            "flex": 0.3,
            "flexDirection": "row",
            "justifyContent": "space-around",
          }
        }
      >
        <Component
          style={
            Object {
              "alignItems": "center",
              "flex": 0.6,
              "justifyContent": "center",
            }
          }
        >
          <ForwardRef(Themed.Button)
            buttonStyle={
              Object {
                "backgroundColor": "transparent",
                "borderColor": "white",
                "borderRadius": 20,
                "borderStyle": "solid",
                "borderWidth": 3,
                "width": 160,
              }
            }
            onPress={[Function]}
            title="My Summary"
          />
        </Component>
        <Component
          style={
            Object {
              "alignItems": "center",
              "flex": 0.4,
              "flexDirection": "row",
              "justifyContent": "center",
            }
          }
        >
          <ForwardRef(Themed.Button)
            buttonStyle={
              Object {
                "backgroundColor": "transparent",
                "borderColor": "white",
                "borderRadius": 20,
                "borderStyle": "solid",
                "borderWidth": 3,
                "width": 100,
              }
            }
            onPress={[Function]}
            title="Log Out"
          />
        </Component>
      </Component>
    </Component>
    <Component
      style={
        Object {
          "backgroundColor": "white",
          "flex": 0.2,
        }
      }
    >
      <Connect(ChannelIconList)
        navigate={[MockFunction]}
      />
    </Component>
    <Component
      style={
        Object {
          "alignItems": "stretch",
          "flex": 0.45,
        }
      }
    >
      <Connect(TaskChecklist)
        finishedTasks={Array []}
        onGoingTasks={Array []}
      />
    </Component>
  </Component>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Component
          style={
            Object {
              "flex": 0.35,
            }
          }
        >
          <Component
            style={
              Object {
                "flex": 0.7,
                "flexDirection": "row",
              }
            }
          >
            <Component
              style={
                Object {
                  "alignItems": "flex-start",
                  "flex": 0.6,
                  "justifyContent": "center",
                  "marginLeft": 30,
                  "marginTop": 50,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "color": "white",
                    "fontSize": 25,
                    "fontWeight": "bold",
                    "margin": 5,
                  }
                }
              >
                mock
              </Text>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "color": "white",
                    "fontSize": 15,
                    "margin": 5,
                  }
                }
              />
            </Component>
            <Component
              style={
                Object {
                  "alignItems": "center",
                  "flex": 0.4,
                  "justifyContent": "flex-end",
                }
              }
            >
              <Themed.Avatar
                height={128}
                source={
                  Object {
                    "uri": undefined,
                  }
                }
                width={128}
              />
            </Component>
          </Component>
          <Component
            style={
              Object {
                "alignItems": "center",
                "flex": 0.3,
                "flexDirection": "row",
                "justifyContent": "space-around",
              }
            }
          >
            <Component
              style={
                Object {
                  "alignItems": "center",
                  "flex": 0.6,
                  "justifyContent": "center",
                }
              }
            >
              <ForwardRef(Themed.Button)
                buttonStyle={
                  Object {
                    "backgroundColor": "transparent",
                    "borderColor": "white",
                    "borderRadius": 20,
                    "borderStyle": "solid",
                    "borderWidth": 3,
                    "width": 160,
                  }
                }
                onPress={[Function]}
                title="My Summary"
              />
            </Component>
            <Component
              style={
                Object {
                  "alignItems": "center",
                  "flex": 0.4,
                  "flexDirection": "row",
                  "justifyContent": "center",
                }
              }
            >
              <ForwardRef(Themed.Button)
                buttonStyle={
                  Object {
                    "backgroundColor": "transparent",
                    "borderColor": "white",
                    "borderRadius": 20,
                    "borderStyle": "solid",
                    "borderWidth": 3,
                    "width": 100,
                  }
                }
                onPress={[Function]}
                title="Log Out"
              />
            </Component>
          </Component>
        </Component>,
        <Component
          style={
            Object {
              "backgroundColor": "white",
              "flex": 0.2,
            }
          }
        >
          <Connect(ChannelIconList)
            navigate={[MockFunction]}
          />
        </Component>,
        <Component
          style={
            Object {
              "alignItems": "stretch",
              "flex": 0.45,
            }
          }
        >
          <Connect(TaskChecklist)
            finishedTasks={Array []}
            onGoingTasks={Array []}
          />
        </Component>,
      ],
      "style": Object {
        "alignItems": "stretch",
        "backgroundColor": "grey",
        "flex": 1,
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Component
              style={
                Object {
                  "flex": 0.7,
                  "flexDirection": "row",
                }
              }
            >
              <Component
                style={
                  Object {
                    "alignItems": "flex-start",
                    "flex": 0.6,
                    "justifyContent": "center",
                    "marginLeft": 30,
                    "marginTop": 50,
                  }
                }
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "white",
                      "fontSize": 25,
                      "fontWeight": "bold",
                      "margin": 5,
                    }
                  }
                >
                  mock
                </Text>
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "white",
                      "fontSize": 15,
                      "margin": 5,
                    }
                  }
                />
              </Component>
              <Component
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 0.4,
                    "justifyContent": "flex-end",
                  }
                }
              >
                <Themed.Avatar
                  height={128}
                  source={
                    Object {
                      "uri": undefined,
                    }
                  }
                  width={128}
                />
              </Component>
            </Component>,
            <Component
              style={
                Object {
                  "alignItems": "center",
                  "flex": 0.3,
                  "flexDirection": "row",
                  "justifyContent": "space-around",
                }
              }
            >
              <Component
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 0.6,
                    "justifyContent": "center",
                  }
                }
              >
                <ForwardRef(Themed.Button)
                  buttonStyle={
                    Object {
                      "backgroundColor": "transparent",
                      "borderColor": "white",
                      "borderRadius": 20,
                      "borderStyle": "solid",
                      "borderWidth": 3,
                      "width": 160,
                    }
                  }
                  onPress={[Function]}
                  title="My Summary"
                />
              </Component>
              <Component
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 0.4,
                    "flexDirection": "row",
                    "justifyContent": "center",
                  }
                }
              >
                <ForwardRef(Themed.Button)
                  buttonStyle={
                    Object {
                      "backgroundColor": "transparent",
                      "borderColor": "white",
                      "borderRadius": 20,
                      "borderStyle": "solid",
                      "borderWidth": 3,
                      "width": 100,
                    }
                  }
                  onPress={[Function]}
                  title="Log Out"
                />
              </Component>
            </Component>,
          ],
          "style": Object {
            "flex": 0.35,
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Component
                  style={
                    Object {
                      "alignItems": "flex-start",
                      "flex": 0.6,
                      "justifyContent": "center",
                      "marginLeft": 30,
                      "marginTop": 50,
                    }
                  }
                >
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                      Object {
                        "color": "white",
                        "fontSize": 25,
                        "fontWeight": "bold",
                        "margin": 5,
                      }
                    }
                  >
                    mock
                  </Text>
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                      Object {
                        "color": "white",
                        "fontSize": 15,
                        "margin": 5,
                      }
                    }
                  />
                </Component>,
                <Component
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 0.4,
                      "justifyContent": "flex-end",
                    }
                  }
                >
                  <Themed.Avatar
                    height={128}
                    source={
                      Object {
                        "uri": undefined,
                      }
                    }
                    width={128}
                  />
                </Component>,
              ],
              "style": Object {
                "flex": 0.7,
                "flexDirection": "row",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Text
                      accessible={true}
                      allowFontScaling={true}
                      ellipsizeMode="tail"
                      style={
                        Object {
                          "color": "white",
                          "fontSize": 25,
                          "fontWeight": "bold",
                          "margin": 5,
                        }
                      }
                    >
                      mock
                    </Text>,
                    <Text
                      accessible={true}
                      allowFontScaling={true}
                      ellipsizeMode="tail"
                      style={
                        Object {
                          "color": "white",
                          "fontSize": 15,
                          "margin": 5,
                        }
                      }
                    />,
                  ],
                  "style": Object {
                    "alignItems": "flex-start",
                    "flex": 0.6,
                    "justifyContent": "center",
                    "marginLeft": 30,
                    "marginTop": 50,
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "accessible": true,
                      "allowFontScaling": true,
                      "children": "mock",
                      "ellipsizeMode": "tail",
                      "style": Object {
                        "color": "white",
                        "fontSize": 25,
                        "fontWeight": "bold",
                        "margin": 5,
                      },
                    },
                    "ref": null,
                    "rendered": "mock",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "accessible": true,
                      "allowFontScaling": true,
                      "children": undefined,
                      "ellipsizeMode": "tail",
                      "style": Object {
                        "color": "white",
                        "fontSize": 15,
                        "margin": 5,
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Themed.Avatar
                    height={128}
                    source={
                      Object {
                        "uri": undefined,
                      }
                    }
                    width={128}
                  />,
                  "style": Object {
                    "alignItems": "center",
                    "flex": 0.4,
                    "justifyContent": "flex-end",
                  },
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "height": 128,
                    "source": Object {
                      "uri": undefined,
                    },
                    "width": 128,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Component
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 0.6,
                      "justifyContent": "center",
                    }
                  }
                >
                  <ForwardRef(Themed.Button)
                    buttonStyle={
                      Object {
                        "backgroundColor": "transparent",
                        "borderColor": "white",
                        "borderRadius": 20,
                        "borderStyle": "solid",
                        "borderWidth": 3,
                        "width": 160,
                      }
                    }
                    onPress={[Function]}
                    title="My Summary"
                  />
                </Component>,
                <Component
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 0.4,
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                >
                  <ForwardRef(Themed.Button)
                    buttonStyle={
                      Object {
                        "backgroundColor": "transparent",
                        "borderColor": "white",
                        "borderRadius": 20,
                        "borderStyle": "solid",
                        "borderWidth": 3,
                        "width": 100,
                      }
                    }
                    onPress={[Function]}
                    title="Log Out"
                  />
                </Component>,
              ],
              "style": Object {
                "alignItems": "center",
                "flex": 0.3,
                "flexDirection": "row",
                "justifyContent": "space-around",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <ForwardRef(Themed.Button)
                    buttonStyle={
                      Object {
                        "backgroundColor": "transparent",
                        "borderColor": "white",
                        "borderRadius": 20,
                        "borderStyle": "solid",
                        "borderWidth": 3,
                        "width": 160,
                      }
                    }
                    onPress={[Function]}
                    title="My Summary"
                  />,
                  "style": Object {
                    "alignItems": "center",
                    "flex": 0.6,
                    "justifyContent": "center",
                  },
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonStyle": Object {
                      "backgroundColor": "transparent",
                      "borderColor": "white",
                      "borderRadius": 20,
                      "borderStyle": "solid",
                      "borderWidth": 3,
                      "width": 160,
                    },
                    "onPress": [Function],
                    "title": "My Summary",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <ForwardRef(Themed.Button)
                    buttonStyle={
                      Object {
                        "backgroundColor": "transparent",
                        "borderColor": "white",
                        "borderRadius": 20,
                        "borderStyle": "solid",
                        "borderWidth": 3,
                        "width": 100,
                      }
                    }
                    onPress={[Function]}
                    title="Log Out"
                  />,
                  "style": Object {
                    "alignItems": "center",
                    "flex": 0.4,
                    "flexDirection": "row",
                    "justifyContent": "center",
                  },
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonStyle": Object {
                      "backgroundColor": "transparent",
                      "borderColor": "white",
                      "borderRadius": 20,
                      "borderStyle": "solid",
                      "borderWidth": 3,
                      "width": 100,
                    },
                    "onPress": [Function],
                    "title": "Log Out",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Connect(ChannelIconList)
            navigate={[MockFunction]}
          />,
          "style": Object {
            "backgroundColor": "white",
            "flex": 0.2,
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "channels": undefined,
            "navigate": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Connect(TaskChecklist)
            finishedTasks={Array []}
            onGoingTasks={Array []}
          />,
          "style": Object {
            "alignItems": "stretch",
            "flex": 0.45,
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "finishedTasks": Array [],
            "onGoingTasks": Array [],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "View",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Component
            style={
              Object {
                "flex": 0.35,
              }
            }
          >
            <Component
              style={
                Object {
                  "flex": 0.7,
                  "flexDirection": "row",
                }
              }
            >
              <Component
                style={
                  Object {
                    "alignItems": "flex-start",
                    "flex": 0.6,
                    "justifyContent": "center",
                    "marginLeft": 30,
                    "marginTop": 50,
                  }
                }
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "white",
                      "fontSize": 25,
                      "fontWeight": "bold",
                      "margin": 5,
                    }
                  }
                >
                  mock
                </Text>
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "white",
                      "fontSize": 15,
                      "margin": 5,
                    }
                  }
                />
              </Component>
              <Component
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 0.4,
                    "justifyContent": "flex-end",
                  }
                }
              >
                <Themed.Avatar
                  height={128}
                  source={
                    Object {
                      "uri": undefined,
                    }
                  }
                  width={128}
                />
              </Component>
            </Component>
            <Component
              style={
                Object {
                  "alignItems": "center",
                  "flex": 0.3,
                  "flexDirection": "row",
                  "justifyContent": "space-around",
                }
              }
            >
              <Component
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 0.6,
                    "justifyContent": "center",
                  }
                }
              >
                <ForwardRef(Themed.Button)
                  buttonStyle={
                    Object {
                      "backgroundColor": "transparent",
                      "borderColor": "white",
                      "borderRadius": 20,
                      "borderStyle": "solid",
                      "borderWidth": 3,
                      "width": 160,
                    }
                  }
                  onPress={[Function]}
                  title="My Summary"
                />
              </Component>
              <Component
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 0.4,
                    "flexDirection": "row",
                    "justifyContent": "center",
                  }
                }
              >
                <ForwardRef(Themed.Button)
                  buttonStyle={
                    Object {
                      "backgroundColor": "transparent",
                      "borderColor": "white",
                      "borderRadius": 20,
                      "borderStyle": "solid",
                      "borderWidth": 3,
                      "width": 100,
                    }
                  }
                  onPress={[Function]}
                  title="Log Out"
                />
              </Component>
            </Component>
          </Component>,
          <Component
            style={
              Object {
                "backgroundColor": "white",
                "flex": 0.2,
              }
            }
          >
            <Connect(ChannelIconList)
              navigate={[MockFunction]}
            />
          </Component>,
          <Component
            style={
              Object {
                "alignItems": "stretch",
                "flex": 0.45,
              }
            }
          >
            <Connect(TaskChecklist)
              finishedTasks={Array []}
              onGoingTasks={Array []}
            />
          </Component>,
        ],
        "style": Object {
          "alignItems": "stretch",
          "backgroundColor": "grey",
          "flex": 1,
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Component
                style={
                  Object {
                    "flex": 0.7,
                    "flexDirection": "row",
                  }
                }
              >
                <Component
                  style={
                    Object {
                      "alignItems": "flex-start",
                      "flex": 0.6,
                      "justifyContent": "center",
                      "marginLeft": 30,
                      "marginTop": 50,
                    }
                  }
                >
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                      Object {
                        "color": "white",
                        "fontSize": 25,
                        "fontWeight": "bold",
                        "margin": 5,
                      }
                    }
                  >
                    mock
                  </Text>
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                      Object {
                        "color": "white",
                        "fontSize": 15,
                        "margin": 5,
                      }
                    }
                  />
                </Component>
                <Component
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 0.4,
                      "justifyContent": "flex-end",
                    }
                  }
                >
                  <Themed.Avatar
                    height={128}
                    source={
                      Object {
                        "uri": undefined,
                      }
                    }
                    width={128}
                  />
                </Component>
              </Component>,
              <Component
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 0.3,
                    "flexDirection": "row",
                    "justifyContent": "space-around",
                  }
                }
              >
                <Component
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 0.6,
                      "justifyContent": "center",
                    }
                  }
                >
                  <ForwardRef(Themed.Button)
                    buttonStyle={
                      Object {
                        "backgroundColor": "transparent",
                        "borderColor": "white",
                        "borderRadius": 20,
                        "borderStyle": "solid",
                        "borderWidth": 3,
                        "width": 160,
                      }
                    }
                    onPress={[Function]}
                    title="My Summary"
                  />
                </Component>
                <Component
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 0.4,
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                >
                  <ForwardRef(Themed.Button)
                    buttonStyle={
                      Object {
                        "backgroundColor": "transparent",
                        "borderColor": "white",
                        "borderRadius": 20,
                        "borderStyle": "solid",
                        "borderWidth": 3,
                        "width": 100,
                      }
                    }
                    onPress={[Function]}
                    title="Log Out"
                  />
                </Component>
              </Component>,
            ],
            "style": Object {
              "flex": 0.35,
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Component
                    style={
                      Object {
                        "alignItems": "flex-start",
                        "flex": 0.6,
                        "justifyContent": "center",
                        "marginLeft": 30,
                        "marginTop": 50,
                      }
                    }
                  >
                    <Text
                      accessible={true}
                      allowFontScaling={true}
                      ellipsizeMode="tail"
                      style={
                        Object {
                          "color": "white",
                          "fontSize": 25,
                          "fontWeight": "bold",
                          "margin": 5,
                        }
                      }
                    >
                      mock
                    </Text>
                    <Text
                      accessible={true}
                      allowFontScaling={true}
                      ellipsizeMode="tail"
                      style={
                        Object {
                          "color": "white",
                          "fontSize": 15,
                          "margin": 5,
                        }
                      }
                    />
                  </Component>,
                  <Component
                    style={
                      Object {
                        "alignItems": "center",
                        "flex": 0.4,
                        "justifyContent": "flex-end",
                      }
                    }
                  >
                    <Themed.Avatar
                      height={128}
                      source={
                        Object {
                          "uri": undefined,
                        }
                      }
                      width={128}
                    />
                  </Component>,
                ],
                "style": Object {
                  "flex": 0.7,
                  "flexDirection": "row",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Text
                        accessible={true}
                        allowFontScaling={true}
                        ellipsizeMode="tail"
                        style={
                          Object {
                            "color": "white",
                            "fontSize": 25,
                            "fontWeight": "bold",
                            "margin": 5,
                          }
                        }
                      >
                        mock
                      </Text>,
                      <Text
                        accessible={true}
                        allowFontScaling={true}
                        ellipsizeMode="tail"
                        style={
                          Object {
                            "color": "white",
                            "fontSize": 15,
                            "margin": 5,
                          }
                        }
                      />,
                    ],
                    "style": Object {
                      "alignItems": "flex-start",
                      "flex": 0.6,
                      "justifyContent": "center",
                      "marginLeft": 30,
                      "marginTop": 50,
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "accessible": true,
                        "allowFontScaling": true,
                        "children": "mock",
                        "ellipsizeMode": "tail",
                        "style": Object {
                          "color": "white",
                          "fontSize": 25,
                          "fontWeight": "bold",
                          "margin": 5,
                        },
                      },
                      "ref": null,
                      "rendered": "mock",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "accessible": true,
                        "allowFontScaling": true,
                        "children": undefined,
                        "ellipsizeMode": "tail",
                        "style": Object {
                          "color": "white",
                          "fontSize": 15,
                          "margin": 5,
                        },
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <Themed.Avatar
                      height={128}
                      source={
                        Object {
                          "uri": undefined,
                        }
                      }
                      width={128}
                    />,
                    "style": Object {
                      "alignItems": "center",
                      "flex": 0.4,
                      "justifyContent": "flex-end",
                    },
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "height": 128,
                      "source": Object {
                        "uri": undefined,
                      },
                      "width": 128,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Component
                    style={
                      Object {
                        "alignItems": "center",
                        "flex": 0.6,
                        "justifyContent": "center",
                      }
                    }
                  >
                    <ForwardRef(Themed.Button)
                      buttonStyle={
                        Object {
                          "backgroundColor": "transparent",
                          "borderColor": "white",
                          "borderRadius": 20,
                          "borderStyle": "solid",
                          "borderWidth": 3,
                          "width": 160,
                        }
                      }
                      onPress={[Function]}
                      title="My Summary"
                    />
                  </Component>,
                  <Component
                    style={
                      Object {
                        "alignItems": "center",
                        "flex": 0.4,
                        "flexDirection": "row",
                        "justifyContent": "center",
                      }
                    }
                  >
                    <ForwardRef(Themed.Button)
                      buttonStyle={
                        Object {
                          "backgroundColor": "transparent",
                          "borderColor": "white",
                          "borderRadius": 20,
                          "borderStyle": "solid",
                          "borderWidth": 3,
                          "width": 100,
                        }
                      }
                      onPress={[Function]}
                      title="Log Out"
                    />
                  </Component>,
                ],
                "style": Object {
                  "alignItems": "center",
                  "flex": 0.3,
                  "flexDirection": "row",
                  "justifyContent": "space-around",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <ForwardRef(Themed.Button)
                      buttonStyle={
                        Object {
                          "backgroundColor": "transparent",
                          "borderColor": "white",
                          "borderRadius": 20,
                          "borderStyle": "solid",
                          "borderWidth": 3,
                          "width": 160,
                        }
                      }
                      onPress={[Function]}
                      title="My Summary"
                    />,
                    "style": Object {
                      "alignItems": "center",
                      "flex": 0.6,
                      "justifyContent": "center",
                    },
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "buttonStyle": Object {
                        "backgroundColor": "transparent",
                        "borderColor": "white",
                        "borderRadius": 20,
                        "borderStyle": "solid",
                        "borderWidth": 3,
                        "width": 160,
                      },
                      "onPress": [Function],
                      "title": "My Summary",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "render": [Function],
                    },
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <ForwardRef(Themed.Button)
                      buttonStyle={
                        Object {
                          "backgroundColor": "transparent",
                          "borderColor": "white",
                          "borderRadius": 20,
                          "borderStyle": "solid",
                          "borderWidth": 3,
                          "width": 100,
                        }
                      }
                      onPress={[Function]}
                      title="Log Out"
                    />,
                    "style": Object {
                      "alignItems": "center",
                      "flex": 0.4,
                      "flexDirection": "row",
                      "justifyContent": "center",
                    },
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "buttonStyle": Object {
                        "backgroundColor": "transparent",
                        "borderColor": "white",
                        "borderRadius": 20,
                        "borderStyle": "solid",
                        "borderWidth": 3,
                        "width": 100,
                      },
                      "onPress": [Function],
                      "title": "Log Out",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "render": [Function],
                    },
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Connect(ChannelIconList)
              navigate={[MockFunction]}
            />,
            "style": Object {
              "backgroundColor": "white",
              "flex": 0.2,
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "channels": undefined,
              "navigate": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Connect(TaskChecklist)
              finishedTasks={Array []}
              onGoingTasks={Array []}
            />,
            "style": Object {
              "alignItems": "stretch",
              "flex": 0.45,
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "finishedTasks": Array [],
              "onGoingTasks": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "View",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;
